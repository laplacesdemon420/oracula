an arbitration service for disputes


- crowdsourcing, blockchains and economic incentives

An agent (jury) follows a procedure where an input (evidence) is used to produce an output (decision) 
jury, evidence => decision

- you should be rewarded for voting with the majority, but you should not know what others are voting for.

- the more you stake, the likelier you're to get selected as a juror

- contracts choose number of jurors
- can choose between different cours, swe court, insurance court, etc

economic interest for users to serve as jurors:
  - collect arbitration fees

role of $PNK:
  - protects against sybil attack (ofc)
  - incentive jurors to vote honestly (because they get fees if the are right)

For a dispute that requires 5 votes, 5 tokens are drawn out of the x $PNK that were staked. The token
owner for these 5 tokens are now the jurors for this dispute.

selection of jurors is done randomly, how?
- "random" numbers drawn from blockhashes (miners can censor, but unlikely)

VOTES
- jurors commit by submitting hash(vote, salt, address). Salt is added locally to add entropy.
- when vote is over, reveal by submitting the (vote, salt), SC verifies.
    - jurors that fail to reveal are penalized
- votes are aggregated, highest amount of votes is the winner

It's also possible to configure a dispute to not use a commit/reveal scheme, and just commit publicly.

ARBITRATION FEES
  - payed out to honest voters 
    - fee is determined by the subcourt


APPEALS
  - Each new appeal instance will have twice the previous number of jurors plus one



ATTACK RESISTANCE
  - 51% attack
  - bribes
    - bribing small juries could be easy
      - appeals make it harder though, and in the end a 51% attack is necessary
    - cost-of-corruption > profit-from-corruption!
    - p + epsilon attack?





problems:
  - cannot push expiry forward
  - user have to do too many things
  - don't really see the benefit of jurors, vs just letting everyone with stake vote.

pros:
  - can choose between public and private vote
